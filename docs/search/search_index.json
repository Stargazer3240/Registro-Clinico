{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo a documenta\u00e7\u00e3o do Registro Cl\u00ednico Para visualizar o c\u00f3digo fonte do programa, a origem do link de download do execut\u00e1vel e tamb\u00e9m os arquivos usados para essa documenta\u00e7\u00e3o, acesse o GitHub do projeto. Layout da documenta\u00e7\u00e3o docs/ index.md # P\u00e1gina Inicial. utilization.md # Apresenta\u00e7\u00e3o das telas e funcionalidade dos bot\u00f5es. install.md # Onde conseguir o programa e o que fazer com ele. database.md # Os modelos utilizados para criar o banco de dados. code.md # Aqui s\u00e3o mostrados o diagrama de classes e uma breve explica\u00e7\u00e3o. about.md # Informa\u00e7\u00f5es sobre o projeto, ferramentas e autor. images/ ... # Imagens utilizadas na documenta\u00e7\u00e3o.","title":"Inicio"},{"location":"#bem-vindo-a-documentacao-do-registro-clinico","text":"Para visualizar o c\u00f3digo fonte do programa, a origem do link de download do execut\u00e1vel e tamb\u00e9m os arquivos usados para essa documenta\u00e7\u00e3o, acesse o GitHub do projeto.","title":"Bem vindo a documenta\u00e7\u00e3o do Registro Cl\u00ednico"},{"location":"#layout-da-documentacao","text":"docs/ index.md # P\u00e1gina Inicial. utilization.md # Apresenta\u00e7\u00e3o das telas e funcionalidade dos bot\u00f5es. install.md # Onde conseguir o programa e o que fazer com ele. database.md # Os modelos utilizados para criar o banco de dados. code.md # Aqui s\u00e3o mostrados o diagrama de classes e uma breve explica\u00e7\u00e3o. about.md # Informa\u00e7\u00f5es sobre o projeto, ferramentas e autor. images/ ... # Imagens utilizadas na documenta\u00e7\u00e3o.","title":"Layout da documenta\u00e7\u00e3o"},{"location":"about/","text":"Projeto Integrador Tanto esta documenta\u00e7\u00e3o, como o programa associado no GitHub, foram desenvolvidos para compor a nota do Projeto Integrador do 2\u00ba per\u00edodo do curso de Bacharelado em Sistemas de Informa\u00e7\u00e3o da UNI-RN. Ferramentas Documenta\u00e7\u00e3o O MkDocs \u00e9 uma ferramenta para gerar sites de documenta\u00e7\u00e3o, sendo esses escritos em Markdown. Ele gera uma p\u00e1gina est\u00e1tica e permite uma customiza\u00e7\u00e3o f\u00e1cil. Desenvolvimento Para gerar o programa, foram utilizados a linguagem Python associada com a IDE Spyder(Conda). Foram utilizados conhecimentos fundamentais da programa\u00e7\u00e3o, comum na maioria das linguagens, e tamb\u00e9m o paradigma de Orienta\u00e7\u00e3o a Objetos, sendo amplamente usados os conceitos de classe, heran\u00e7a, atributos e m\u00e9todos. Al\u00e9m disso, foi utilizado o m\u00f3dulo de interface gr\u00e1fica Tkinter, presente na instala\u00e7\u00e3o do Python. O c\u00f3digo fonte foi compilado a partir do Pyinstaller. Banco de Dados O SGBD utilizado foi o PostgreSQL, ferramenta open-source e free. Para ter uma vis\u00e3o gerencial ampla do banco, utilizou-se o programa PgAdmin, contido no SGBD. Por fim, foi usado o m\u00f3dulo do Python 'psycopg2' para fazer o link entre o banco e o c\u00f3digo. Autor A documenta\u00e7\u00e3o e o projeto foram desenvolvidos pelo aluno do curso de BSI UNI-RN, tendo ingressado em 2018.1.","title":"Sobre"},{"location":"about/#projeto-integrador","text":"Tanto esta documenta\u00e7\u00e3o, como o programa associado no GitHub, foram desenvolvidos para compor a nota do Projeto Integrador do 2\u00ba per\u00edodo do curso de Bacharelado em Sistemas de Informa\u00e7\u00e3o da UNI-RN.","title":"Projeto Integrador"},{"location":"about/#ferramentas","text":"","title":"Ferramentas"},{"location":"about/#documentacao","text":"O MkDocs \u00e9 uma ferramenta para gerar sites de documenta\u00e7\u00e3o, sendo esses escritos em Markdown. Ele gera uma p\u00e1gina est\u00e1tica e permite uma customiza\u00e7\u00e3o f\u00e1cil.","title":"Documenta\u00e7\u00e3o"},{"location":"about/#desenvolvimento","text":"Para gerar o programa, foram utilizados a linguagem Python associada com a IDE Spyder(Conda). Foram utilizados conhecimentos fundamentais da programa\u00e7\u00e3o, comum na maioria das linguagens, e tamb\u00e9m o paradigma de Orienta\u00e7\u00e3o a Objetos, sendo amplamente usados os conceitos de classe, heran\u00e7a, atributos e m\u00e9todos. Al\u00e9m disso, foi utilizado o m\u00f3dulo de interface gr\u00e1fica Tkinter, presente na instala\u00e7\u00e3o do Python. O c\u00f3digo fonte foi compilado a partir do Pyinstaller.","title":"Desenvolvimento"},{"location":"about/#banco-de-dados","text":"O SGBD utilizado foi o PostgreSQL, ferramenta open-source e free. Para ter uma vis\u00e3o gerencial ampla do banco, utilizou-se o programa PgAdmin, contido no SGBD. Por fim, foi usado o m\u00f3dulo do Python 'psycopg2' para fazer o link entre o banco e o c\u00f3digo.","title":"Banco de Dados"},{"location":"about/#autor","text":"A documenta\u00e7\u00e3o e o projeto foram desenvolvidos pelo aluno do curso de BSI UNI-RN, tendo ingressado em 2018.1.","title":"Autor"},{"location":"code/","text":"Diagrama de Classes Descri\u00e7\u00e3o breve As classes GUI s\u00e3o respons\u00e1veis pela base da interface gr\u00e1fica. S\u00e3o nelas que est\u00e3o localizadas as vari\u00e1veis de Texto, Label, Button, Frame e Entry. Sem elas tudo se resumiria a uma linha de comando pouco amig\u00e1vel para usu\u00e1rios. class MenuPrincipal # Pequeno trecho retirado do c\u00f3digo da classe. def __init__ ( self ): Tk . __init__ ( self ) self . frame_menu = tk . Frame ( self ) self . frame_paciente = tk . Frame ( self ) self . frame_profissional = tk . Frame ( self ) self . frame_sala = tk . Frame ( self ) self . frame_equipamento = tk . Frame ( self ) self . frame_servico = tk . Frame ( self ) self . frame_equip_serv = tk . Frame ( self ) self . frame_menu . grid ( row = 0 , column = 0 ) \"\"\"Essa classe \u00e9 respons\u00e1vel pelo menu que ir\u00e1 abrir todas as outras telas, sendo nela que s\u00e3o criados os frames para as outras GUI, junto com o posicionamento grid desses frames. Pode-se dizer que ela \u00e9 o alicerce da interface.\"\"\" J\u00e1 as classes Main associam a cla\u00fasula \"command\" do tkinter aos bot\u00f5es e respectivos m\u00e9todos. Todos, com exce\u00e7\u00e3o da class MainMenu , herdam das classes Backend, cada um formando uma linha de conex\u00e3o para cada tabela do banco. \u00c9 aqui onde os atributos Text inseridos nos campos das interfaces ser\u00e3o captados usando .get(), enviando os par\u00e2metros para o backend. Al\u00e9m disso, s\u00e3o realizados testes e inseridas exce\u00e7\u00f5es para facilitar o entendimento do usu\u00e1rio. # M\u00e9todo comando_inserir da class MainPaciente def comando_inserir ( self ): \"\"\"Realize o comando INSERT na tabela Paciente.\"\"\" try : self . inserir_paciente ( self . gui . txt_cpf . get (), self . gui . txt_nome . get (), self . gui . txt_idade . get (), self . gui . txt_sexo . get (), self . gui . txt_doenca . get (), self . gui . txt_altura . get (), self . gui . txt_peso . get (), self . gui . txt_cidade . get (), self . gui . txt_bairro . get (), self . gui . txt_rua . get (), self . gui . txt_numero . get (), self . gui . txt_complemento . get ()) except psycopg2 . IntegrityError : print ( 'CPF j\u00e1 utilizado.' ) except psycopg2 . ProgrammingError : print ( 'Inseriu letras em campos n\u00famericos.' ) except psycopg2 . DataError : print ( 'Ultrapassou o limite de caracteres ou n\u00fameros de ' 'um campo. \\n ' '(OBS: Altura deve ser colocada em metros ex.: 1.75)' ) No caso da classe MainMenu , ela herdar\u00e1 do frontend.MenuPrincipal para facilitar a manipula\u00e7\u00e3o dos atributos e bot\u00f5es. Ela se utiliza de m\u00e9todos para invocar cada tela, inserindo como par\u00e2metro para o requisito parent a sua pr\u00f3pria inst\u00e2ncia. class MainMenu ( frontend . MenuPrincipal ): \"\"\"Atribua comandos aos bot\u00f5es do menu principal\"\"\" def __init__ ( self ): frontend . MenuPrincipal . __init__ ( self ) self . button_paciente [ \"command\" ] = self . get_paciente self . button_profissional [ \"command\" ] = self . get_profissional self . button_sala [ \"command\" ] = self . get_sala self . button_equipamento [ \"command\" ] = self . get_equipamento self . button_servico [ \"command\" ] = self . get_servico self . button_servico [ \"command\" ] = self . get_servico self . button_equip_serv [ \"command\" ] = self . get_equip_ser def get_paciente ( self ): \"\"\"Invoque a GUI Paciente.\"\"\" MainPaciente ( self ) Por fim, a class BD \u00e9 a respons\u00e1vel por executar o comandos do psycopg2, sendo esses inseridos em m\u00e9todos para poderem ser utilizados pelas class Backend . Essas classes herdam de BD e possuem m\u00e9todos para captar como par\u00e2metro o que foi enviado pelas classes Main . class BackendPaciente ( BD ): \"\"\"Realize os comandos SQL da tabela Paciente.\"\"\" def __init__ ( self ): BD . __init__ ( self ) def inserir_paciente ( self , cpf , nome , idade , sexo , doenca , altura , peso , cidade , bairro , rua , numero , complemento ): \"\"\"Insira na tabela Paciente as informa\u00e7\u00f5es.\"\"\" self . conectar () if idade == '' : idade = 'NULL' if altura == '' : altura = 'NULL' if peso == '' : peso = 'NULL' self . executar ( \"INSERT INTO paciente(cpf, nome, idade, sexo, doenca, \\ altura, peso, cidade, bairro, rua, numero, complemento) \\ VALUES('{}','{}',{},'{}','{}',{},{},'{}', '{}','{}', \\ '{}','{}')\" . format ( cpf , nome , idade , sexo , doenca , altura , peso , cidade , bairro , rua , numero , complemento )) self . persistir () self . desconectar ()","title":"C\u00f3digo"},{"location":"code/#diagrama-de-classes","text":"","title":"Diagrama de Classes"},{"location":"code/#descricao-breve","text":"As classes GUI s\u00e3o respons\u00e1veis pela base da interface gr\u00e1fica. S\u00e3o nelas que est\u00e3o localizadas as vari\u00e1veis de Texto, Label, Button, Frame e Entry. Sem elas tudo se resumiria a uma linha de comando pouco amig\u00e1vel para usu\u00e1rios. class MenuPrincipal # Pequeno trecho retirado do c\u00f3digo da classe. def __init__ ( self ): Tk . __init__ ( self ) self . frame_menu = tk . Frame ( self ) self . frame_paciente = tk . Frame ( self ) self . frame_profissional = tk . Frame ( self ) self . frame_sala = tk . Frame ( self ) self . frame_equipamento = tk . Frame ( self ) self . frame_servico = tk . Frame ( self ) self . frame_equip_serv = tk . Frame ( self ) self . frame_menu . grid ( row = 0 , column = 0 ) \"\"\"Essa classe \u00e9 respons\u00e1vel pelo menu que ir\u00e1 abrir todas as outras telas, sendo nela que s\u00e3o criados os frames para as outras GUI, junto com o posicionamento grid desses frames. Pode-se dizer que ela \u00e9 o alicerce da interface.\"\"\" J\u00e1 as classes Main associam a cla\u00fasula \"command\" do tkinter aos bot\u00f5es e respectivos m\u00e9todos. Todos, com exce\u00e7\u00e3o da class MainMenu , herdam das classes Backend, cada um formando uma linha de conex\u00e3o para cada tabela do banco. \u00c9 aqui onde os atributos Text inseridos nos campos das interfaces ser\u00e3o captados usando .get(), enviando os par\u00e2metros para o backend. Al\u00e9m disso, s\u00e3o realizados testes e inseridas exce\u00e7\u00f5es para facilitar o entendimento do usu\u00e1rio. # M\u00e9todo comando_inserir da class MainPaciente def comando_inserir ( self ): \"\"\"Realize o comando INSERT na tabela Paciente.\"\"\" try : self . inserir_paciente ( self . gui . txt_cpf . get (), self . gui . txt_nome . get (), self . gui . txt_idade . get (), self . gui . txt_sexo . get (), self . gui . txt_doenca . get (), self . gui . txt_altura . get (), self . gui . txt_peso . get (), self . gui . txt_cidade . get (), self . gui . txt_bairro . get (), self . gui . txt_rua . get (), self . gui . txt_numero . get (), self . gui . txt_complemento . get ()) except psycopg2 . IntegrityError : print ( 'CPF j\u00e1 utilizado.' ) except psycopg2 . ProgrammingError : print ( 'Inseriu letras em campos n\u00famericos.' ) except psycopg2 . DataError : print ( 'Ultrapassou o limite de caracteres ou n\u00fameros de ' 'um campo. \\n ' '(OBS: Altura deve ser colocada em metros ex.: 1.75)' ) No caso da classe MainMenu , ela herdar\u00e1 do frontend.MenuPrincipal para facilitar a manipula\u00e7\u00e3o dos atributos e bot\u00f5es. Ela se utiliza de m\u00e9todos para invocar cada tela, inserindo como par\u00e2metro para o requisito parent a sua pr\u00f3pria inst\u00e2ncia. class MainMenu ( frontend . MenuPrincipal ): \"\"\"Atribua comandos aos bot\u00f5es do menu principal\"\"\" def __init__ ( self ): frontend . MenuPrincipal . __init__ ( self ) self . button_paciente [ \"command\" ] = self . get_paciente self . button_profissional [ \"command\" ] = self . get_profissional self . button_sala [ \"command\" ] = self . get_sala self . button_equipamento [ \"command\" ] = self . get_equipamento self . button_servico [ \"command\" ] = self . get_servico self . button_servico [ \"command\" ] = self . get_servico self . button_equip_serv [ \"command\" ] = self . get_equip_ser def get_paciente ( self ): \"\"\"Invoque a GUI Paciente.\"\"\" MainPaciente ( self ) Por fim, a class BD \u00e9 a respons\u00e1vel por executar o comandos do psycopg2, sendo esses inseridos em m\u00e9todos para poderem ser utilizados pelas class Backend . Essas classes herdam de BD e possuem m\u00e9todos para captar como par\u00e2metro o que foi enviado pelas classes Main . class BackendPaciente ( BD ): \"\"\"Realize os comandos SQL da tabela Paciente.\"\"\" def __init__ ( self ): BD . __init__ ( self ) def inserir_paciente ( self , cpf , nome , idade , sexo , doenca , altura , peso , cidade , bairro , rua , numero , complemento ): \"\"\"Insira na tabela Paciente as informa\u00e7\u00f5es.\"\"\" self . conectar () if idade == '' : idade = 'NULL' if altura == '' : altura = 'NULL' if peso == '' : peso = 'NULL' self . executar ( \"INSERT INTO paciente(cpf, nome, idade, sexo, doenca, \\ altura, peso, cidade, bairro, rua, numero, complemento) \\ VALUES('{}','{}',{},'{}','{}',{},{},'{}', '{}','{}', \\ '{}','{}')\" . format ( cpf , nome , idade , sexo , doenca , altura , peso , cidade , bairro , rua , numero , complemento )) self . persistir () self . desconectar ()","title":"Descri\u00e7\u00e3o breve"},{"location":"database/","text":"N\u00edvel Descritivo O paciente possui c\u00f3digo (identificador \u00fanico), cpf, nome, idade, sexo, doen\u00e7a, altura, peso, cidade, bairro, rua e complemento. Um paciente pode receber um ou mais servi\u00e7os e um servi\u00e7o s\u00f3 pode possuir um paciente. Um profissional possui c\u00f3digo (identificador \u00fanico), CNPJ, nome, sal\u00e1rio e atua\u00e7\u00e3o. Um profissional pode prestar um ou mais servi\u00e7os e um servi\u00e7o s\u00f3 pode ser prestado por um profissional. As salas possuem sigla (primary key) e capacidade. Cada servi\u00e7o s\u00f3 utiliza uma sala, mas uma sala pode ser usada por mais de um servi\u00e7o. Os equipamentos t\u00eam c\u00f3digo (identificador) e nome. Um equipamento pode ser usado por um ou mais servi\u00e7os e um servi\u00e7o pode utilizar nenhum ou mais equipamentos. Diagrama Entidade-Relacionamento Esquema Relacional","title":"Banco de Dados"},{"location":"database/#nivel-descritivo","text":"O paciente possui c\u00f3digo (identificador \u00fanico), cpf, nome, idade, sexo, doen\u00e7a, altura, peso, cidade, bairro, rua e complemento. Um paciente pode receber um ou mais servi\u00e7os e um servi\u00e7o s\u00f3 pode possuir um paciente. Um profissional possui c\u00f3digo (identificador \u00fanico), CNPJ, nome, sal\u00e1rio e atua\u00e7\u00e3o. Um profissional pode prestar um ou mais servi\u00e7os e um servi\u00e7o s\u00f3 pode ser prestado por um profissional. As salas possuem sigla (primary key) e capacidade. Cada servi\u00e7o s\u00f3 utiliza uma sala, mas uma sala pode ser usada por mais de um servi\u00e7o. Os equipamentos t\u00eam c\u00f3digo (identificador) e nome. Um equipamento pode ser usado por um ou mais servi\u00e7os e um servi\u00e7o pode utilizar nenhum ou mais equipamentos.","title":"N\u00edvel Descritivo"},{"location":"database/#diagrama-entidade-relacionamento","text":"","title":"Diagrama Entidade-Relacionamento"},{"location":"database/#esquema-relacional","text":"","title":"Esquema Relacional"},{"location":"install/","text":"Pr\u00e9-Requisitos PostgreSQL Download O executavel do programa pode ser facilmente adquirido no GitHub do projeto, sendo o arquivo a seguir ( clique na imagem para baixar ). J\u00e1 o Postgres pode ser baixado neste link ( clique na imagem para ir para o site de downloads ).","title":"Instala\u00e7\u00e3o"},{"location":"install/#pre-requisitos","text":"PostgreSQL","title":"Pr\u00e9-Requisitos"},{"location":"install/#download","text":"O executavel do programa pode ser facilmente adquirido no GitHub do projeto, sendo o arquivo a seguir ( clique na imagem para baixar ). J\u00e1 o Postgres pode ser baixado neste link ( clique na imagem para ir para o site de downloads ).","title":"Download"},{"location":"utilization/","text":"Prompt de Comando Ao iniciar o execut\u00e1vel, um prompt de comando (cmd) ir\u00e1 aparecer. Ele inicialmente ir\u00e1 tentar-se conectar com o banco de dados e, caso a senha n\u00e3o seja a padr\u00e3o ou o computador n\u00e3o possua Postgres, ele ir\u00e1 requisitar que digite a senha certa. Sendo o segundo caso, feche o CMD e instale o Postgres . Telas O programa possui 8 telas e um CMD: 1. Menu Principal Cada tabela pode ser acessada com seus respectivos bot\u00f5es nesse menu. \u00c9 permitido abrir mais de uma tabela ao mesmo tempo e, quando uma delas for fechada, o menu principal ir\u00e1 se manter. Para sair do programa, basta fechar o menu. 2. Tabela Paciente Inserir Esse bot\u00e3o ir\u00e1 realizar inserir dados no banco com o campos CPF, Nome, Idade, Sexo, Doenca, Altura, Peso, Cidade, Bairro, Rua, N\u00famero e Complemento. \u00c9 permitido colocar campos vazios, menos no CPF . Suas restrin\u00e7\u00f5es s\u00e3o, respectivamente: CPF: coloque um CPF v\u00e1lido com 11 digitos (somente n\u00fameros). Nome: \u00e9 permitido colocar nomes com at\u00e9 50 caracteres. Idade: somente n\u00fameros inteiros. Sexo: somente 1 caracterer, digite M para Masculino ou F para Feminino. Doen\u00e7a: \u00e9 permitido colocar nomes com at\u00e9 50 caracteres. Altura: coloque a altura em metros, sendo 1 n\u00famero antes do ponto e duas casas decimais, por exemplo (1.75). Peso: coloque o peso em quilogramas, sendo 3 digitos permitidos antes do ponto e uma casa decimal, por exemplo (69.5). Cidade: \u00e9 permitido colocar uma cidade com at\u00e9 30 caracteres. Bairro: \u00e9 permitido colocar um bairro com at\u00e9 20 caracteres. Rua: \u00e9 permitido colocar uma rua com at\u00e9 50 caracteres. N\u00famero: n\u00famero do local, at\u00e9 5 digitos. Complemento: apartamento, bloco ou semelhante, 10 caracteres. Selecionar Ao clicar nesse bot\u00e3o, o sistema ir\u00e1 retornar todas as tuplas com campos semelhantes aos colocados. Aqui pode ser utilizado o c\u00f3digo para buscar. Atualizar Esse bot\u00e3o atualiza todos os campos de uma tupla, independente do que voc\u00ea quiser alterar, a partir do c\u00f3digo dessa tupla. Campos preenchidos ser\u00e3o substituidos por espa\u00e7os em brancos caso n\u00e3o repita as informa\u00e7\u00f5es que quiser manter. Deletar Elimina uma tupla da tabela a partir do c\u00f3digo desejado. Retornar Esse bot\u00e3o \u00e9 quase puramente est\u00e9tico, ele fecha a janela da tabela, isso pode ser feito apertando o bot\u00e3o padr\u00e3o para fechar. 3. Tabela Profissional Inserir Insere os seguintes campos: CNPJ: insira um CNPJ v\u00e1lido com 14 digitos. Nome: permitido nomes com 50 caracteres. Sal\u00e1rio: v\u00e1lido um n\u00famero com qualquer quantidade de digitos. Atua\u00e7\u00e3o: em que \u00e1rea ou fun\u00e7\u00e3o o profissional atua (25 caracteres). Os outros bot\u00f5es tem fun\u00e7\u00e3o semelhante aos da Tabela Paciente. 4. Tabela Sala Inserir Insere os seguintes dados: Sigla: sigla que ir\u00e1 identificar a sala, 10 caracteres ou digitos. Capacidade: a quantidade de pessoas que a sala suporta, obrigatoriamente um n\u00famero inteiro. Os outros bot\u00f5es tem fun\u00e7\u00e3o semelhante as outras tabelas. 5. Tabela Equipamento Inserir Insira o nome do equipamento, 30 caracteres. Ele ser\u00e1 identificado pelo c\u00f3digo gerado pelo sistema. Os outros bot\u00f5es tem fun\u00e7\u00e3o semelhante as outras tabelas. 6. Tabela Servi\u00e7o Inserir Essa tabela tem caracter\u00edsticas especiais. Os tr\u00eas \u00faltimos campos necessariamente devem referenciar tuplas j\u00e1 existente nas outras tabelas, para garantir a integridade, ent\u00e3o \u00e9 necessario inserir informa\u00e7\u00f5es nelas. Nome: permitido 30 caracteres. Tipo de Consulta: se \u00e9 particular, plano (qual plano), 15 caracteres. Receita: coloque o n\u00famero do valor gerado pelo servi\u00e7o. Hora: insira a hora que o servi\u00e7o come\u00e7ou, formato: HH:MM ex. (23:40). Sa\u00edda: hor\u00e1rio que o servi\u00e7o terminou, formato semelhante. Data: data do servi\u00e7o, formato: AAAA##MM##DD ex. (2017##05##23). Sigla Sala: insira a sigla da sala onde o servi\u00e7o aconteceu. Codigo Paciente: insira o c\u00f3digo da tupla do paciente atendido. Codigo Profissional: insira o c\u00f3digo da tupla do profissional que atendeu. Os outros bot\u00f5es tem fun\u00e7\u00e3o semelhante as outras tabelas. 7. Tabela rela\u00e7\u00e3o Equipamento-Servi\u00e7o Essa tabela \u00e9 somente uma forma de gerar uma conex\u00e3o entre o equipamento utilizado em determinado servi\u00e7o. Inserir Servi\u00e7o: inserir c\u00f3digo do servi\u00e7o. Equipamento: inserir c\u00f3digo do equipamento. 8. Menu Estatistica Essa interface mostra alguns dados que podem ser relevantes de algumas das outras tabelas. Ao clicar em atualizar, os dados ir\u00e3o aparecer, caso n\u00e3o tenha clicado antes ou ir\u00e3o atualizar se mudan\u00e7as tiverem sido feitas nas outras tabelas. Os dados s\u00e3o: Idade m\u00e9dia dos pacientes. Contagem de pessoas do sexo feminino e masculino. Altura m\u00e9dia dos pacientes. Peso m\u00e9dio dos pacientes. Sal\u00e1rio m\u00e9dio dos profissionais. Capacidade m\u00e9dia das salas. Receita m\u00e9dia dos servi\u00e7os. Contagem de cada tipo de consulta existente (aparece no CMD). CMD Aqui ser\u00e3o apresentados os dados de cada select e os tipos de consultas da tabela estatistica. Cada linha corresponde a uma tupla e, no caso dos selects, s\u00e3o mostrados os campos na ordem que est\u00e3o sendo apresentados na interface da tabela. Nesse caso, o primeiro conjunto de linhas \u00e9 cada plano de sa\u00fade e sua contagem (exemplos foram utilizados). E, embaixo, s\u00e3o conjuntos de tuplas da tabela paciente. A ordem de cada coluna ser\u00e1 a ordem apresentada no modelo relacional e tamb\u00e9m ser\u00e1 um pouco semelhante com os campos da interface. Ent\u00e3o ser\u00e1, nessa ordem: C\u00f3digo, CPF, Nome, Idade, Sexo, Doen\u00e7a, Altura, Peso, Cidade, Bairro, Rua, N\u00famero e Complemento. Repare que em alguns lugares existem '' ou None , isso significa que esses campos n\u00e3o foram preenchidos pelo usu\u00e1rio, sendo colocados valores nulos.","title":"Utiliza\u00e7\u00e3o"},{"location":"utilization/#prompt-de-comando","text":"Ao iniciar o execut\u00e1vel, um prompt de comando (cmd) ir\u00e1 aparecer. Ele inicialmente ir\u00e1 tentar-se conectar com o banco de dados e, caso a senha n\u00e3o seja a padr\u00e3o ou o computador n\u00e3o possua Postgres, ele ir\u00e1 requisitar que digite a senha certa. Sendo o segundo caso, feche o CMD e instale o Postgres .","title":"Prompt de Comando"},{"location":"utilization/#telas","text":"O programa possui 8 telas e um CMD:","title":"Telas"},{"location":"utilization/#1-menu-principal","text":"Cada tabela pode ser acessada com seus respectivos bot\u00f5es nesse menu. \u00c9 permitido abrir mais de uma tabela ao mesmo tempo e, quando uma delas for fechada, o menu principal ir\u00e1 se manter. Para sair do programa, basta fechar o menu.","title":"1. Menu Principal"},{"location":"utilization/#2-tabela-paciente","text":"","title":"2. Tabela Paciente"},{"location":"utilization/#inserir","text":"Esse bot\u00e3o ir\u00e1 realizar inserir dados no banco com o campos CPF, Nome, Idade, Sexo, Doenca, Altura, Peso, Cidade, Bairro, Rua, N\u00famero e Complemento. \u00c9 permitido colocar campos vazios, menos no CPF . Suas restrin\u00e7\u00f5es s\u00e3o, respectivamente: CPF: coloque um CPF v\u00e1lido com 11 digitos (somente n\u00fameros). Nome: \u00e9 permitido colocar nomes com at\u00e9 50 caracteres. Idade: somente n\u00fameros inteiros. Sexo: somente 1 caracterer, digite M para Masculino ou F para Feminino. Doen\u00e7a: \u00e9 permitido colocar nomes com at\u00e9 50 caracteres. Altura: coloque a altura em metros, sendo 1 n\u00famero antes do ponto e duas casas decimais, por exemplo (1.75). Peso: coloque o peso em quilogramas, sendo 3 digitos permitidos antes do ponto e uma casa decimal, por exemplo (69.5). Cidade: \u00e9 permitido colocar uma cidade com at\u00e9 30 caracteres. Bairro: \u00e9 permitido colocar um bairro com at\u00e9 20 caracteres. Rua: \u00e9 permitido colocar uma rua com at\u00e9 50 caracteres. N\u00famero: n\u00famero do local, at\u00e9 5 digitos. Complemento: apartamento, bloco ou semelhante, 10 caracteres.","title":"Inserir"},{"location":"utilization/#selecionar","text":"Ao clicar nesse bot\u00e3o, o sistema ir\u00e1 retornar todas as tuplas com campos semelhantes aos colocados. Aqui pode ser utilizado o c\u00f3digo para buscar.","title":"Selecionar"},{"location":"utilization/#atualizar","text":"Esse bot\u00e3o atualiza todos os campos de uma tupla, independente do que voc\u00ea quiser alterar, a partir do c\u00f3digo dessa tupla. Campos preenchidos ser\u00e3o substituidos por espa\u00e7os em brancos caso n\u00e3o repita as informa\u00e7\u00f5es que quiser manter.","title":"Atualizar"},{"location":"utilization/#deletar","text":"Elimina uma tupla da tabela a partir do c\u00f3digo desejado.","title":"Deletar"},{"location":"utilization/#retornar","text":"Esse bot\u00e3o \u00e9 quase puramente est\u00e9tico, ele fecha a janela da tabela, isso pode ser feito apertando o bot\u00e3o padr\u00e3o para fechar.","title":"Retornar"},{"location":"utilization/#3-tabela-profissional","text":"","title":"3. Tabela Profissional"},{"location":"utilization/#inserir_1","text":"Insere os seguintes campos: CNPJ: insira um CNPJ v\u00e1lido com 14 digitos. Nome: permitido nomes com 50 caracteres. Sal\u00e1rio: v\u00e1lido um n\u00famero com qualquer quantidade de digitos. Atua\u00e7\u00e3o: em que \u00e1rea ou fun\u00e7\u00e3o o profissional atua (25 caracteres). Os outros bot\u00f5es tem fun\u00e7\u00e3o semelhante aos da Tabela Paciente.","title":"Inserir"},{"location":"utilization/#4-tabela-sala","text":"","title":"4. Tabela Sala"},{"location":"utilization/#inserir_2","text":"Insere os seguintes dados: Sigla: sigla que ir\u00e1 identificar a sala, 10 caracteres ou digitos. Capacidade: a quantidade de pessoas que a sala suporta, obrigatoriamente um n\u00famero inteiro. Os outros bot\u00f5es tem fun\u00e7\u00e3o semelhante as outras tabelas.","title":"Inserir"},{"location":"utilization/#5-tabela-equipamento","text":"","title":"5. Tabela Equipamento"},{"location":"utilization/#inserir_3","text":"Insira o nome do equipamento, 30 caracteres. Ele ser\u00e1 identificado pelo c\u00f3digo gerado pelo sistema. Os outros bot\u00f5es tem fun\u00e7\u00e3o semelhante as outras tabelas.","title":"Inserir"},{"location":"utilization/#6-tabela-servico","text":"","title":"6. Tabela Servi\u00e7o"},{"location":"utilization/#inserir_4","text":"Essa tabela tem caracter\u00edsticas especiais. Os tr\u00eas \u00faltimos campos necessariamente devem referenciar tuplas j\u00e1 existente nas outras tabelas, para garantir a integridade, ent\u00e3o \u00e9 necessario inserir informa\u00e7\u00f5es nelas. Nome: permitido 30 caracteres. Tipo de Consulta: se \u00e9 particular, plano (qual plano), 15 caracteres. Receita: coloque o n\u00famero do valor gerado pelo servi\u00e7o. Hora: insira a hora que o servi\u00e7o come\u00e7ou, formato: HH:MM ex. (23:40). Sa\u00edda: hor\u00e1rio que o servi\u00e7o terminou, formato semelhante. Data: data do servi\u00e7o, formato: AAAA##MM##DD ex. (2017##05##23). Sigla Sala: insira a sigla da sala onde o servi\u00e7o aconteceu. Codigo Paciente: insira o c\u00f3digo da tupla do paciente atendido. Codigo Profissional: insira o c\u00f3digo da tupla do profissional que atendeu. Os outros bot\u00f5es tem fun\u00e7\u00e3o semelhante as outras tabelas.","title":"Inserir"},{"location":"utilization/#7-tabela-relacao-equipamento-servico","text":"Essa tabela \u00e9 somente uma forma de gerar uma conex\u00e3o entre o equipamento utilizado em determinado servi\u00e7o.","title":"7. Tabela rela\u00e7\u00e3o Equipamento-Servi\u00e7o"},{"location":"utilization/#inserir_5","text":"Servi\u00e7o: inserir c\u00f3digo do servi\u00e7o. Equipamento: inserir c\u00f3digo do equipamento.","title":"Inserir"},{"location":"utilization/#8-menu-estatistica","text":"Essa interface mostra alguns dados que podem ser relevantes de algumas das outras tabelas. Ao clicar em atualizar, os dados ir\u00e3o aparecer, caso n\u00e3o tenha clicado antes ou ir\u00e3o atualizar se mudan\u00e7as tiverem sido feitas nas outras tabelas. Os dados s\u00e3o: Idade m\u00e9dia dos pacientes. Contagem de pessoas do sexo feminino e masculino. Altura m\u00e9dia dos pacientes. Peso m\u00e9dio dos pacientes. Sal\u00e1rio m\u00e9dio dos profissionais. Capacidade m\u00e9dia das salas. Receita m\u00e9dia dos servi\u00e7os. Contagem de cada tipo de consulta existente (aparece no CMD).","title":"8. Menu Estatistica"},{"location":"utilization/#cmd","text":"Aqui ser\u00e3o apresentados os dados de cada select e os tipos de consultas da tabela estatistica. Cada linha corresponde a uma tupla e, no caso dos selects, s\u00e3o mostrados os campos na ordem que est\u00e3o sendo apresentados na interface da tabela. Nesse caso, o primeiro conjunto de linhas \u00e9 cada plano de sa\u00fade e sua contagem (exemplos foram utilizados). E, embaixo, s\u00e3o conjuntos de tuplas da tabela paciente. A ordem de cada coluna ser\u00e1 a ordem apresentada no modelo relacional e tamb\u00e9m ser\u00e1 um pouco semelhante com os campos da interface. Ent\u00e3o ser\u00e1, nessa ordem: C\u00f3digo, CPF, Nome, Idade, Sexo, Doen\u00e7a, Altura, Peso, Cidade, Bairro, Rua, N\u00famero e Complemento. Repare que em alguns lugares existem '' ou None , isso significa que esses campos n\u00e3o foram preenchidos pelo usu\u00e1rio, sendo colocados valores nulos.","title":"CMD"}]}